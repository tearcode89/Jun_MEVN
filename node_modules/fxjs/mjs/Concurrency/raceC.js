import _asyncToGenerator from "@babel/runtime-corejs3/helpers/asyncToGenerator";
import _regeneratorRuntime from "@babel/runtime-corejs3/regenerator";
import takeRaceC from "./takeRaceC.js";
export default function raceC(_x) {
  return _raceC.apply(this, arguments);
}

function _raceC() {
  _raceC = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(iter) {
    return _regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return takeRaceC(1, iter);

          case 2:
            return _context.abrupt("return", _context.sent[0]);

          case 3:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _raceC.apply(this, arguments);
}