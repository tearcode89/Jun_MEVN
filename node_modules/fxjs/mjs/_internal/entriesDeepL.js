import _sliceInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/slice";
import _regeneratorRuntime from "@babel/runtime-corejs3/regenerator";
import entriesL from "../Lazy/entriesL.js";
import mapEntriesL from "../Lazy/mapEntriesL.js";
import cond from "../Strict/cond.js";
import either from "../Strict/either.js";
import go from "../Strict/go.js";
import identity from "../Strict/identity.js";
import isArray from "../Strict/isArray.js";
import isFunction from "../Strict/isFunction.js";
import isIterable from "../Strict/isIterable.js";
import isObject from "../Strict/isObject.js";
import isString from "../Strict/isString.js";
import clonedIterableSymbol from "./clonedIterableSymbol.js";

var delegateIterable = /*#__PURE__*/_regeneratorRuntime.mark(function delegateIterable(iter) {
  return _regeneratorRuntime.wrap(function delegateIterable$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          return _context.delegateYield(iter, "t0", 1);

        case 1:
        case "end":
          return _context.stop();
      }
    }
  }, delegateIterable);
});

var cloneIterable = function cloneIterable(iter) {
  var cloned = delegateIterable(iter);
  cloned[clonedIterableSymbol] = true;
  return cloned;
};

export default function entriesDeepL(obj) {
  return go(obj, entriesL, mapEntriesL(cond([isArray, function (arr) {
    return _sliceInstanceProperty(arr).call(arr);
  }], [isString, identity], [isIterable, cloneIterable], [either(isObject, isFunction), entriesDeepL], [function () {
    return true;
  }, identity])));
}