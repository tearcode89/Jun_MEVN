import _slicedToArray from "@babel/runtime-corejs3/helpers/slicedToArray";
import go from "../Strict/go.js";
import isArray from "../Strict/isArray.js";
import isIterable from "../Strict/isIterable.js";
import isString from "../Strict/isString.js";
import not from "../Strict/not.js";
import reduce from "../Strict/reduce.js";
import when from "../Strict/when.js";
import clonedIterable from "./clonedIterableSymbol.js";

var isEntries = function isEntries(a) {
  return not(isString(a)) && not(isArray(a)) && isIterable(a) && not(a[clonedIterable]) === true;
};

export default function objectDeep(entries) {
  return reduce(function (acc, _ref) {
    var _ref2 = _slicedToArray(_ref, 2),
        k = _ref2[0],
        v = _ref2[1];

    return go(v, when(isEntries, objectDeep), function (res) {
      return acc[k] = res, acc;
    });
  }, {}, entries);
}