import _regeneratorRuntime from "@babel/runtime-corejs3/regenerator";
import _Promise from "@babel/runtime-corejs3/core-js-stable/promise";
import _sliceInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/slice";
import _Array$from from "@babel/runtime-corejs3/core-js-stable/array/from";
import _Symbol from "@babel/runtime-corejs3/core-js-stable/symbol";
import _getIteratorMethod from "@babel/runtime-corejs3/core-js/get-iterator-method";
import _Array$isArray from "@babel/runtime-corejs3/core-js-stable/array/is-array";

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof _Symbol !== "undefined" && _getIteratorMethod(o) || o["@@iterator"]; if (!it) { if (_Array$isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { var _context3; if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = _sliceInstanceProperty(_context3 = Object.prototype.toString.call(o)).call(_context3, 8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return _Array$from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

import curry from "../Strict/curry.js";
import go1 from "../Strict/go1.js";
import nop from "../Strict/nop.js";
import toIter from "../Strict/toIter.js";
export default curry( /*#__PURE__*/_regeneratorRuntime.mark(function filterL(f, iter) {
  var _iterator, _step, _loop;

  return _regeneratorRuntime.wrap(function filterL$(_context2) {
    while (1) {
      switch (_context2.prev = _context2.next) {
        case 0:
          _iterator = _createForOfIteratorHelper(toIter(iter));
          _context2.prev = 1;
          _loop = /*#__PURE__*/_regeneratorRuntime.mark(function _loop() {
            var a, b;
            return _regeneratorRuntime.wrap(function _loop$(_context) {
              while (1) {
                switch (_context.prev = _context.next) {
                  case 0:
                    a = _step.value;
                    b = go1(a, f);

                    if (!(b instanceof _Promise)) {
                      _context.next = 7;
                      break;
                    }

                    _context.next = 5;
                    return b.then(function (b) {
                      return b ? a : _Promise.reject(nop);
                    });

                  case 5:
                    _context.next = 10;
                    break;

                  case 7:
                    if (!b) {
                      _context.next = 10;
                      break;
                    }

                    _context.next = 10;
                    return a;

                  case 10:
                  case "end":
                    return _context.stop();
                }
              }
            }, _loop);
          });

          _iterator.s();

        case 4:
          if ((_step = _iterator.n()).done) {
            _context2.next = 8;
            break;
          }

          return _context2.delegateYield(_loop(), "t0", 6);

        case 6:
          _context2.next = 4;
          break;

        case 8:
          _context2.next = 13;
          break;

        case 10:
          _context2.prev = 10;
          _context2.t1 = _context2["catch"](1);

          _iterator.e(_context2.t1);

        case 13:
          _context2.prev = 13;

          _iterator.f();

          return _context2.finish(13);

        case 16:
        case "end":
          return _context2.stop();
      }
    }
  }, filterL, null, [[1, 10, 13, 16]]);
}));