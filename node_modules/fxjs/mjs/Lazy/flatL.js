import _defineProperty from "@babel/runtime-corejs3/helpers/defineProperty";
import _getIterator from "@babel/runtime-corejs3/core-js/get-iterator";
import _Promise from "@babel/runtime-corejs3/core-js-stable/promise";
import _Symbol$iterator from "@babel/runtime-corejs3/core-js-stable/symbol/iterator";
import isIterable from "../Strict/isIterable.js";
import last from "../Strict/last.js";
import toIter from "../Strict/toIter.js";
import nop from "../Strict/nop.js";
export default function flatL(iter) {
  var depth = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
  var concurCheck = null;
  var iterStack = [toIter(iter)];
  return _defineProperty({
    next: function recur() {
      var iter = last(iterStack);
      if (!iter) return {
        done: true
      };
      var cur = iter.next();

      if (cur.done) {
        iterStack.pop();
        return recur();
      } else if (iterStack.length <= depth && isIterable(cur.value) && typeof cur.value != "string") {
        iterStack.push(_getIterator(cur.value));
        return recur();
      } else if (cur.value instanceof _Promise) {
        if (concurCheck && !concurCheck.done) {
          iterStack.length = 0;
          return {
            value: _Promise.reject(new Error("'L.flat' can not be used with 'C' function.")),
            done: false
          };
        }

        concurCheck = concurCheck || {};
        return {
          value: cur.value.then(function (value) {
            if (!concurCheck.hasOwnProperty("done")) concurCheck.done = true;
            if (iterStack.length > depth || !isIterable(value) || typeof value == "string") return value;

            var iter = _getIterator(value),
                cur = iter.next();

            return cur.done ? _Promise.reject(nop) : (iterStack.push(iter), cur.value);
          }).catch(function (e) {
            if (!concurCheck.hasOwnProperty("done")) concurCheck.done = true;
            return _Promise.reject(e);
          }),
          done: false
        };
      } else {
        return cur;
      }
    }
  }, _Symbol$iterator, function () {
    return this;
  });
}