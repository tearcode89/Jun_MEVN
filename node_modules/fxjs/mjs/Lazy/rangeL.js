import _regeneratorRuntime from "@babel/runtime-corejs3/regenerator";

var _marked = /*#__PURE__*/_regeneratorRuntime.mark(rangeL);

export default function rangeL() {
  var start,
      stop,
      step,
      _args = arguments;
  return _regeneratorRuntime.wrap(function rangeL$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          start = _args.length > 0 && _args[0] !== undefined ? _args[0] : 0;
          stop = _args.length > 1 && _args[1] !== undefined ? _args[1] : start;
          step = _args.length > 2 && _args[2] !== undefined ? _args[2] : 1;
          if (_args.length === 1) start = 0;
          if (_args.length < 3 && start > stop) step *= -1;

          if (!(start < stop)) {
            _context.next = 14;
            break;
          }

        case 6:
          if (!(start < stop)) {
            _context.next = 12;
            break;
          }

          _context.next = 9;
          return start;

        case 9:
          start += step;
          _context.next = 6;
          break;

        case 12:
          _context.next = 20;
          break;

        case 14:
          if (!(start > stop)) {
            _context.next = 20;
            break;
          }

          _context.next = 17;
          return start;

        case 17:
          start += step;
          _context.next = 14;
          break;

        case 20:
        case "end":
          return _context.stop();
      }
    }
  }, _marked);
}