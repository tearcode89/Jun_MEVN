import map from "../Strict/map.js";
import toIter from "../Strict/toIter.js";
import curry from "../Strict/curry.js";
import go from "../Strict/go.js";
import mapL from "./mapL.js";
import rangeL from "./rangeL.js";
import takeWhileL from "./takeWhileL.js";
import some from "../Strict/some.js";
export default curry(function zipL() {
  for (var _len = arguments.length, iterables = new Array(_len), _key = 0; _key < _len; _key++) {
    iterables[_key] = arguments[_key];
  }

  var iterators = map(toIter, iterables);
  return go(rangeL(Infinity), mapL(function (_) {
    return map(function (it) {
      return it.next();
    }, iterators);
  }), takeWhileL(some(function (cur) {
    return !cur.done;
  })), mapL(map(function (cur) {
    return cur.value;
  })));
});