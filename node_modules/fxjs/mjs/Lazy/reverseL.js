import _regeneratorRuntime from "@babel/runtime-corejs3/regenerator";

var _marked = /*#__PURE__*/_regeneratorRuntime.mark(reverseL);

import _Array$isArray from "@babel/runtime-corejs3/core-js-stable/array/is-array";
import _Array$from from "@babel/runtime-corejs3/core-js-stable/array/from";
import isIterable from "../Strict/isIterable.js";
export default function reverseL(arr) {
  var l;
  return _regeneratorRuntime.wrap(function reverseL$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          if (!(!_Array$isArray(arr) && isIterable(arr))) {
            _context.next = 3;
            break;
          }

          return _context.delegateYield(reverseL(_Array$from(arr)), "t0", 2);

        case 2:
          return _context.abrupt("return", _context.t0);

        case 3:
          l = arr.length;

        case 4:
          if (!l--) {
            _context.next = 9;
            break;
          }

          _context.next = 7;
          return arr[l];

        case 7:
          _context.next = 4;
          break;

        case 9:
        case "end":
          return _context.stop();
      }
    }
  }, _marked);
}