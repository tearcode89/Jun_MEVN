import toIter from "../Strict/toIter.js";
import go from "../Strict/go.js";
import rangeL from "./rangeL.js";
import mapL from "./mapL.js";
import takeUntilL from "./takeUntilL.js";
import reject from "../Strict/reject.js";
import flatMapL from "./flatMapL.js";
import catchNoopIter from "../_internal/catchNoopIter.js";
export default function limitLoadL(n, iter) {
  if (arguments.length == 1) return typeof n == "number" ? function (_) {
    return limitLoadL(n, _);
  } : n;
  if (n == Infinity) return iter;
  iter = toIter(iter);
  return go(rangeL(Infinity), mapL(function (_) {
    return go(rangeL(n), mapL(function (_) {
      return iter.next();
    }), reject(function (a) {
      return a.done;
    }), catchNoopIter);
  }), takeUntilL(function (a) {
    return a.length < n;
  }), flatMapL(mapL(function (a) {
    return a.value;
  })));
}