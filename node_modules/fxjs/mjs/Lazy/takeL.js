import _regeneratorRuntime from "@babel/runtime-corejs3/regenerator";
import _Promise from "@babel/runtime-corejs3/core-js-stable/promise";
import _sliceInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/slice";
import _Array$from from "@babel/runtime-corejs3/core-js-stable/array/from";
import _Symbol from "@babel/runtime-corejs3/core-js-stable/symbol";
import _getIteratorMethod from "@babel/runtime-corejs3/core-js/get-iterator-method";
import _Array$isArray from "@babel/runtime-corejs3/core-js-stable/array/is-array";

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof _Symbol !== "undefined" && _getIteratorMethod(o) || o["@@iterator"]; if (!it) { if (_Array$isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { var _context3; if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = _sliceInstanceProperty(_context3 = Object.prototype.toString.call(o)).call(_context3, 8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return _Array$from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

import curry from "../Strict/curry.js";
import toIter from "../Strict/toIter.js";
import noop from "../Strict/noop.js";
import nop from "../Strict/nop.js";
export default curry( /*#__PURE__*/_regeneratorRuntime.mark(function takeL(l, iter) {
  var prev, _iterator, _step, _loop, _ret;

  return _regeneratorRuntime.wrap(function takeL$(_context2) {
    while (1) {
      switch (_context2.prev = _context2.next) {
        case 0:
          if (!(l < 1)) {
            _context2.next = 2;
            break;
          }

          return _context2.abrupt("return");

        case 2:
          prev = null;
          _iterator = _createForOfIteratorHelper(toIter(iter));
          _context2.prev = 4;
          _loop = /*#__PURE__*/_regeneratorRuntime.mark(function _loop() {
            var a;
            return _regeneratorRuntime.wrap(function _loop$(_context) {
              while (1) {
                switch (_context.prev = _context.next) {
                  case 0:
                    a = _step.value;

                    if (!(a instanceof _Promise)) {
                      _context.next = 8;
                      break;
                    }

                    a.catch(noop);
                    _context.next = 5;
                    return prev = (prev || _Promise.resolve()).then(function (_) {
                      return a;
                    }).then(function (a) {
                      return --l > -1 ? a : _Promise.reject(nop);
                    });

                  case 5:
                    prev = prev.catch(noop);
                    _context.next = 10;
                    break;

                  case 8:
                    _context.next = 10;
                    return --l, a;

                  case 10:
                    if (l) {
                      _context.next = 12;
                      break;
                    }

                    return _context.abrupt("return", "break");

                  case 12:
                  case "end":
                    return _context.stop();
                }
              }
            }, _loop);
          });

          _iterator.s();

        case 7:
          if ((_step = _iterator.n()).done) {
            _context2.next = 14;
            break;
          }

          return _context2.delegateYield(_loop(), "t0", 9);

        case 9:
          _ret = _context2.t0;

          if (!(_ret === "break")) {
            _context2.next = 12;
            break;
          }

          return _context2.abrupt("break", 14);

        case 12:
          _context2.next = 7;
          break;

        case 14:
          _context2.next = 19;
          break;

        case 16:
          _context2.prev = 16;
          _context2.t1 = _context2["catch"](4);

          _iterator.e(_context2.t1);

        case 19:
          _context2.prev = 19;

          _iterator.f();

          return _context2.finish(19);

        case 22:
        case "end":
          return _context2.stop();
      }
    }
  }, takeL, null, [[4, 16, 19, 22]]);
}));