import _toConsumableArray from "@babel/runtime-corejs3/helpers/toConsumableArray";
import go from "./go.js";
import values from "./values.js";
import find from "./find.js";
import pipe from "./pipe.js";
import isMatch from "./isMatch.js";

function baseMatch(targets) {
  var cbs = [];

  function evl() {
    return go(targets, values, function (targets) {
      return go(cbs, find(function (pb) {
        return pb._case.apply(pb, _toConsumableArray(targets));
      }), function (pb) {
        return pb._body.apply(pb, _toConsumableArray(targets));
      });
    });
  }

  function _case(f) {
    cbs.push({
      _case: typeof f == "function" ? pipe.apply(void 0, arguments) : isMatch(f)
    });
    return _body;
  }

  _case.case = _case;

  function _body() {
    cbs[cbs.length - 1]._body = pipe.apply(void 0, arguments);
    return _case;
  }

  _case.else = function () {
    _case(function (_) {
      return true;
    }).apply(void 0, arguments);

    return targets ? evl() : function () {
      for (var _len = arguments.length, targets2 = new Array(_len), _key = 0; _key < _len; _key++) {
        targets2[_key] = arguments[_key];
      }

      return targets = targets2, evl();
    };
  };

  return _case;
}

function match() {
  for (var _len2 = arguments.length, _ = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
    _[_key2] = arguments[_key2];
  }

  return baseMatch(_);
}

match.case = function () {
  var _baseMatch;

  return (_baseMatch = baseMatch(null)).case.apply(_baseMatch, arguments);
};

export default match;