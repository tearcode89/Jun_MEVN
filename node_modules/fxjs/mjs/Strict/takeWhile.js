import _asyncToGenerator from "@babel/runtime-corejs3/helpers/asyncToGenerator";
import _typeof from "@babel/runtime-corejs3/helpers/typeof";
import _regeneratorRuntime from "@babel/runtime-corejs3/regenerator";
import _Promise from "@babel/runtime-corejs3/core-js-stable/promise";
import toIter from "./toIter.js";
import curry from "./curry.js";
import go1 from "./go1.js";
import nop from "./nop.js";
export default curry(function takeWhile(f, iter) {
  var res = [];
  iter = toIter(iter);
  return function recur() {
    var cur;

    var _loop = function _loop() {
      var a = cur.value;
      var b = go1(a, function (a) {
        return f(a, res);
      });
      if (!b) return {
        v: res
      };

      if (b instanceof _Promise) {
        return {
          v: b.then( /*#__PURE__*/function () {
            var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(b) {
              return _regeneratorRuntime.wrap(function _callee$(_context) {
                while (1) {
                  switch (_context.prev = _context.next) {
                    case 0:
                      if (!b) {
                        _context.next = 9;
                        break;
                      }

                      _context.t1 = res;
                      _context.next = 4;
                      return a;

                    case 4:
                      _context.t2 = _context.sent;

                      _context.t1.push.call(_context.t1, _context.t2);

                      _context.t0 = recur();
                      _context.next = 10;
                      break;

                    case 9:
                      _context.t0 = res;

                    case 10:
                      return _context.abrupt("return", _context.t0);

                    case 11:
                    case "end":
                      return _context.stop();
                  }
                }
              }, _callee);
            }));

            return function (_x) {
              return _ref.apply(this, arguments);
            };
          }()).catch(function (e) {
            return e == nop ? recur() : _Promise.reject(e);
          })
        };
      }

      res.push(a);
    };

    while (!(cur = iter.next()).done) {
      var _ret = _loop();

      if (_typeof(_ret) === "object") return _ret.v;
    }

    return res;
  }();
});