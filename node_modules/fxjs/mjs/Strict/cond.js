import _slicedToArray from "@babel/runtime-corejs3/helpers/slicedToArray";
import go from "./go.js";
import filterL from "../Lazy/filterL.js";
import mapL from "../Lazy/mapL.js";
import head from "./head.js";
export default function cond() {
  for (var _len = arguments.length, fns = new Array(_len), _key = 0; _key < _len; _key++) {
    fns[_key] = arguments[_key];
  }

  return function () {
    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      args[_key2] = arguments[_key2];
    }

    return go(fns, filterL(function (_ref) {
      var _ref2 = _slicedToArray(_ref, 1),
          c = _ref2[0];

      return c.apply(void 0, args);
    }), mapL(function (_ref3) {
      var _ref4 = _slicedToArray(_ref3, 2),
          _ = _ref4[0],
          f = _ref4[1];

      return f.apply(void 0, args);
    }), head);
  };
}