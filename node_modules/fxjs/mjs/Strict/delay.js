import _asyncToGenerator from "@babel/runtime-corejs3/helpers/asyncToGenerator";
import _regeneratorRuntime from "@babel/runtime-corejs3/regenerator";
import _Promise from "@babel/runtime-corejs3/core-js-stable/promise";
import _setTimeout from "@babel/runtime-corejs3/core-js-stable/set-timeout";
import curry from "./curry.js";
export default curry( /*#__PURE__*/function () {
  var _delay = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(time, a) {
    return _regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return new _Promise(function (resolve) {
              return _setTimeout(resolve, time);
            });

          case 2:
            return _context.abrupt("return", a);

          case 3:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));

  function delay(_x, _x2) {
    return _delay.apply(this, arguments);
  }

  return delay;
}());