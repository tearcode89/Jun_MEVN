import _concatInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/concat";
import _Promise from "@babel/runtime-corejs3/core-js-stable/promise";
import toIter from "./toIter.js";
import go1 from "./go1.js";
import go2 from "../_internal/go2.js";
import head from "./head.js";
export default function reduce(f, acc, iter) {
  if (arguments.length == 1) return function () {
    var _context;

    for (var _len = arguments.length, _ = new Array(_len), _key = 0; _key < _len; _key++) {
      _[_key] = arguments[_key];
    }

    return reduce.apply(void 0, _concatInstanceProperty(_context = [f]).call(_context, _));
  };
  if (arguments.length == 2) return reduce(f, head(iter = toIter(acc)), iter);
  iter = toIter(iter);
  return go1(acc, function recur(acc) {
    var cur;

    while (!(cur = iter.next()).done) {
      acc = go2(acc, cur.value, f);
      if (acc instanceof _Promise) return acc.then(recur);
    }

    return acc;
  });
}