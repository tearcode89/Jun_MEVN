import _slicedToArray from "@babel/runtime-corejs3/helpers/slicedToArray";
import curry from "./curry.js";
import go from "./go.js";
import go1 from "./go1.js";
import entries from "./entries.js";
import map from "./map.js";
import reduce from "./reduce.js";
import pipe from "./pipe.js";
import reverse1 from "../_internal/reverse1.js";
var invertBy = curry(function (f, obj) {
  return go(obj, entries, map(pipe(reverse1, function (_ref) {
    var _ref2 = _slicedToArray(_ref, 2),
        k = _ref2[0],
        v = _ref2[1];

    return go1(f(k, v), function (_k) {
      return [_k, v];
    });
  })), function (iter) {
    return reduce(function (acc, _ref3) {
      var _ref4 = _slicedToArray(_ref3, 2),
          k = _ref4[0],
          v = _ref4[1];

      return (acc[k] || (acc[k] = [])).push(v), acc;
    }, {}, iter);
  });
});
export default invertBy;