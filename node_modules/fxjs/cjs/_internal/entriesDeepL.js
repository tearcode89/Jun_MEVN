"use strict";

var _Object$defineProperty = require("@babel/runtime-corejs3/core-js-stable/object/define-property");

var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault");

_Object$defineProperty(exports, "__esModule", {
  value: true
});

exports.default = entriesDeepL;

var _slice = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/slice"));

var _regenerator = _interopRequireDefault(require("@babel/runtime-corejs3/regenerator"));

var _entriesL = _interopRequireDefault(require("../Lazy/entriesL.js"));

var _mapEntriesL = _interopRequireDefault(require("../Lazy/mapEntriesL.js"));

var _cond = _interopRequireDefault(require("../Strict/cond.js"));

var _either = _interopRequireDefault(require("../Strict/either.js"));

var _go = _interopRequireDefault(require("../Strict/go.js"));

var _identity = _interopRequireDefault(require("../Strict/identity.js"));

var _isArray = _interopRequireDefault(require("../Strict/isArray.js"));

var _isFunction = _interopRequireDefault(require("../Strict/isFunction.js"));

var _isIterable = _interopRequireDefault(require("../Strict/isIterable.js"));

var _isObject = _interopRequireDefault(require("../Strict/isObject.js"));

var _isString = _interopRequireDefault(require("../Strict/isString.js"));

var _clonedIterableSymbol = _interopRequireDefault(require("./clonedIterableSymbol.js"));

var delegateIterable = /*#__PURE__*/_regenerator.default.mark(function delegateIterable(iter) {
  return _regenerator.default.wrap(function delegateIterable$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          return _context.delegateYield(iter, "t0", 1);

        case 1:
        case "end":
          return _context.stop();
      }
    }
  }, delegateIterable);
});

var cloneIterable = function cloneIterable(iter) {
  var cloned = delegateIterable(iter);
  cloned[_clonedIterableSymbol.default] = true;
  return cloned;
};

function entriesDeepL(obj) {
  return (0, _go.default)(obj, _entriesL.default, (0, _mapEntriesL.default)((0, _cond.default)([_isArray.default, function (arr) {
    return (0, _slice.default)(arr).call(arr);
  }], [_isString.default, _identity.default], [_isIterable.default, cloneIterable], [(0, _either.default)(_isObject.default, _isFunction.default), entriesDeepL], [function () {
    return true;
  }, _identity.default])));
}