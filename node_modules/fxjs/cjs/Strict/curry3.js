"use strict";

var _Object$defineProperty = require("@babel/runtime-corejs3/core-js-stable/object/define-property");

var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault");

_Object$defineProperty(exports, "__esModule", {
  value: true
});

exports.default = curry3;

var _concat = _interopRequireDefault(require("@babel/runtime-corejs3/core-js-stable/instance/concat"));

function curry3(f) {
  return function (a) {
    var _context;

    for (var _len = arguments.length, _ = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      _[_key - 1] = arguments[_key];
    }

    return _.length > 2 ? f.apply(void 0, (0, _concat.default)(_context = [a]).call(_context, _)) : _.length === 2 ? function () {
      var _context2;

      for (var _len2 = arguments.length, __ = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        __[_key2] = arguments[_key2];
      }

      return f.apply(void 0, (0, _concat.default)(_context2 = [a, _[0], _[1]]).call(_context2, __));
    } : _.length === 1 ? function (b) {
      var _context3;

      for (var _len3 = arguments.length, __ = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
        __[_key3 - 1] = arguments[_key3];
      }

      return __.length ? f.apply(void 0, (0, _concat.default)(_context3 = [a, _[0], b]).call(_context3, __)) : function () {
        var _context4;

        for (var _len4 = arguments.length, __ = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
          __[_key4] = arguments[_key4];
        }

        return f.apply(void 0, (0, _concat.default)(_context4 = [a, _[0], b]).call(_context4, __));
      };
    } : function (b) {
      var _context5;

      for (var _len5 = arguments.length, _ = new Array(_len5 > 1 ? _len5 - 1 : 0), _key5 = 1; _key5 < _len5; _key5++) {
        _[_key5 - 1] = arguments[_key5];
      }

      return _.length > 1 ? f.apply(void 0, (0, _concat.default)(_context5 = [a, b]).call(_context5, _)) : _.length === 1 ? function () {
        var _context6;

        for (var _len6 = arguments.length, __ = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {
          __[_key6] = arguments[_key6];
        }

        return f.apply(void 0, (0, _concat.default)(_context6 = [a, b, _[0]]).call(_context6, __));
      } : function (c) {
        var _context7;

        for (var _len7 = arguments.length, _ = new Array(_len7 > 1 ? _len7 - 1 : 0), _key7 = 1; _key7 < _len7; _key7++) {
          _[_key7 - 1] = arguments[_key7];
        }

        return _.length ? f.apply(void 0, (0, _concat.default)(_context7 = [a, b, c]).call(_context7, _)) : function () {
          var _context8;

          for (var _len8 = arguments.length, _ = new Array(_len8), _key8 = 0; _key8 < _len8; _key8++) {
            _[_key8] = arguments[_key8];
          }

          return f.apply(void 0, (0, _concat.default)(_context8 = [a, b, c]).call(_context8, _));
        };
      };
    };
  };
}